(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{500:function(e,t,s){"use strict";s.r(t);var a=s(2),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"javascript-promises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-promises"}},[e._v("#")]),e._v(" Javascript Promises")]),e._v(" "),s("h1",{attrs:{id:"what-are-the-three-states-of-a-promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-three-states-of-a-promise"}},[e._v("#")]),e._v(" What are the three states of a promise?")]),e._v(" "),s("p",[e._v("The three states of a promise are pending, resolved, and rejected. Pending is the initial state of a promise, resolved is the completed stage of a promise, rejected is the failed state of a promise.")]),e._v(" "),s("h1",{attrs:{id:"how-does-a-promise-seek-to-resolve-the-issues-of-callback-hell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-does-a-promise-seek-to-resolve-the-issues-of-callback-hell"}},[e._v("#")]),e._v(' How does a promise seek to resolve the issues of "callback hell"?')]),e._v(" "),s("p",[e._v("It allows the developer to attach callbacks to the promises instead of passing them as parameters. This makes the code much easier to read.")]),e._v(" "),s("h1",{attrs:{id:"what-is-the-difference-between-then-and-catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-difference-between-then-and-catch"}},[e._v("#")]),e._v(" What is the difference between .then() and .catch()?")]),e._v(" "),s("p",[e._v("The .then() method is only used for resolved promises. The catch method allows the developer to 'trap' an error from a bad request, which makes debugging much easier.")]),e._v(" "),s("p",[e._v("https://github.com/RyanDavis-bcw/trivia")])])}),[],!1,null,null,null);t.default=r.exports}}]);